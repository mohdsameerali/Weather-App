{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\samali tech\\\\hooksreact\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\samali tech\\\\hooksreact\\\\src\\\\featureRedux\\\\counter\\\\Counter.jsx\";\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\n// <---------------------------------------------------- useState--------------------------------------------------->\n\n// import React, {useState} from 'react'\n\n// export default function Counter() {\n\n//     const [count ,setcount]=useState(0);\n//     const [count1 ,setcount1]=useState(50); \n//     function increment(){\n//       setcount(count+1);\n//   }  \n//    function decrement(){\n//     setcount(count-1);\n// }\n\n//   return (\n//     <>\n\n//     <div className=\"mybox\">\n//         <button className=\"butt\" onClick={increment}>+</button>\n//         <h1>{count}</h1>\n\n//         <button className=\"butt\" onClick={decrement}>-</button>\n\n//     </div>\n// </>\n//   )\n// }\n// <---------------------------------------------------- PROGRAMEND----------------------------------------------->\n\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\n// <---------------------------------------------------- useReducer--------------------------------------------------->\nimport React, { useReducer } from 'react';\nimport css from \"./index.css\";\n\n// <-----defining initial state and reducer----->\n// here \"state\" is \"current state\" which is \"initialstate\" as of now\n// as we  can have \"action\" of  different type (increment and decrement or any other action) in such situation we can use \"switch case\"\n// <-----hierarchy of useReducer----->\n// dispatch-->reducer-->state-->count-->display\n//\"dispatch\"--> call \"reducer function\" and tell it what action should it  do, on the basics of the action -->\"state \" is updated and..\n// updated value is return and store in --> \"count\" and diplay it\nvar initialstate = 0;\nvar reducer = function reducer(state, action) {\n  switch (action) {\n    case \"increment\":\n      return state + 1;\n    case \"decrement\":\n      return state - 1;\n    default:\n      return state;\n  }\n};\nexport default function Counter() {\n  //here\"count\" return current state and display it on the screen \n  var _useReducer = useReducer(reducer, initialstate),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    count = _useReducer2[0],\n    dispatch = _useReducer2[1];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mybox\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"butt\",\n    onClick: function onClick() {\n      return dispatch(\"increment\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, \"+\"), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, count), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"butt\",\n    onClick: function onClick() {\n      return dispatch(\"decrement\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, \"-\"));\n}\n\n// <---------------------------------------------------- PROGRAM END--------------------------------------------------->","map":{"version":3,"names":["React","useReducer","css","initialstate","reducer","state","action","Counter","count","dispatch"],"sources":["C:/Users/samali tech/hooksreact/src/featureRedux/counter/Counter.jsx"],"sourcesContent":["\r\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\r\n// <---------------------------------------------------- useState--------------------------------------------------->\r\n\r\n\r\n// import React, {useState} from 'react'\r\n\r\n// export default function Counter() {\r\n    \r\n//     const [count ,setcount]=useState(0);\r\n//     const [count1 ,setcount1]=useState(50); \r\n//     function increment(){\r\n//       setcount(count+1);\r\n//   }  \r\n//    function decrement(){\r\n//     setcount(count-1);\r\n// }\r\n\r\n//   return (\r\n//     <>\r\n\r\n//     <div className=\"mybox\">\r\n//         <button className=\"butt\" onClick={increment}>+</button>\r\n//         <h1>{count}</h1>\r\n\r\n//         <button className=\"butt\" onClick={decrement}>-</button>\r\n\r\n//     </div>\r\n// </>\r\n//   )\r\n// }\r\n// <---------------------------------------------------- PROGRAMEND----------------------------------------------->\r\n\r\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\r\n// <---------------------------------------------------- useReducer--------------------------------------------------->\r\nimport React,{useReducer} from 'react'\r\nimport css from \"./index.css\"\r\n\r\n// <-----defining initial state and reducer----->\r\n// here \"state\" is \"current state\" which is \"initialstate\" as of now\r\n// as we  can have \"action\" of  different type (increment and decrement or any other action) in such situation we can use \"switch case\"\r\n// <-----hierarchy of useReducer----->\r\n// dispatch-->reducer-->state-->count-->display\r\n//\"dispatch\"--> call \"reducer function\" and tell it what action should it  do, on the basics of the action -->\"state \" is updated and..\r\n// updated value is return and store in --> \"count\" and diplay it\r\nconst initialstate=0;\r\nconst reducer=(state,action)=>{\r\n  switch(action){\r\n    case \"increment\": \r\n         return state+1\r\n    case \"decrement\": \r\n          return state-1\r\n    default : \r\n         return state\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\nexport default function Counter() {\r\n  //here\"count\" return current state and display it on the screen \r\n  const[count,dispatch]=useReducer(reducer, initialstate);\r\n  return (\r\n    <div className=\"mybox\">\r\n    <button className=\"butt\" onClick={()=>dispatch(\"increment\")}>+</button>\r\n    <h1>{count}</h1>\r\n\r\n    <button className=\"butt\" onClick={()=>dispatch(\"decrement\")}>-</button>\r\n\r\n</div>\r\n  )\r\n}\r\n\r\n\r\n\r\n// <---------------------------------------------------- PROGRAM END--------------------------------------------------->\r\n"],"mappings":";;AACA;AACA;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,OAAOA,KAAK,IAAEC,UAAU,QAAO,OAAO;AACtC,OAAOC,GAAG,MAAM,aAAa;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,YAAY,GAAC,CAAC;AACpB,IAAMC,OAAO,GAAC,SAARA,OAAO,CAAEC,KAAK,EAACC,MAAM,EAAG;EAC5B,QAAOA,MAAM;IACX,KAAK,WAAW;MACX,OAAOD,KAAK,GAAC,CAAC;IACnB,KAAK,WAAW;MACV,OAAOA,KAAK,GAAC,CAAC;IACpB;MACK,OAAOA,KAAK;EAAA;AAIrB,CAAC;AAGD,eAAe,SAASE,OAAO,GAAG;EAChC;EAAA,kBACsBN,UAAU,CAACG,OAAO,EAAED,YAAY,CAAC;IAAA;IAAjDK,KAAK;IAACC,QAAQ;EACpB,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACtB;IAAQ,SAAS,EAAC,MAAM;IAAC,OAAO,EAAE;MAAA,OAAIA,QAAQ,CAAC,WAAW,CAAC;IAAA,CAAC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OAAW,eACvE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAKD,KAAK,CAAM,eAEhB;IAAQ,SAAS,EAAC,MAAM;IAAC,OAAO,EAAE;MAAA,OAAIC,QAAQ,CAAC,WAAW,CAAC;IAAA,CAAC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,OAAW,CAErE;AAEN;;AAIA"},"metadata":{},"sourceType":"module"}