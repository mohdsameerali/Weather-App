{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samali tech\\\\samreact\\\\src\\\\index.js\";\n//hello world in react\n// \"render\" is a method, it is use for showing the output \n// Note : uncomment the program  to use it \n// Note : \n//<---------------------start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(                                 // \"reactDom\"  is a package and render is   a method  or function \n//     <h1> this is my hello world program </h1>,  //what to show\n//     document.getElementById(\"root\")             // where to show \n// );\n//<--------------------- end-------------------->\n// Note : uncomment the program  to use it \n//hello world in react\n// <-----------multipul element in jsx----------->\n//\"JSX\"  Stands for javascript XML\n//\"XML\" Extensible markedup language\n// Note: \"JSX\" it is a combination of javascript and htm\n//we have one h1 element  and now i want to add on <p> element but onece we add <p>element it wil show as error bcz render method ...\n//only accept one  element so we use one <div>or array of an element\"[]\" element as parent element\n//<--------------------- program start-------------------->\n// import React, { Fragment } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n//     <div>\n//     <h1> this is my hello world program </h1>, \n//     <p> this is my hello world program </p>,    \n//     <h2> this is my hello world program </h2>, \n//     </div>,\n//     document.getElementById(\"root\")             \n//     );\n//<--------------------- program end-------------------->\n// <-----------React.Fragment element in jsx----------->\n//in the place of \"div\" element we can use fragment element bcz div(root) inside div(parent element) take  extra spacea to solve...\n// this problam we use \"React.Fragmant\" element\n//React.Fragment is faster and less  memory consuming as compared to div\n//Note: the first letter of \"React.Fragment\" must be capital\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n// <React.Fragment>\n//     <h1> this is my hello world program </h1>\n//     <p> this is my hello world pS </p>   \n//     <h2> this is my hello world program </h2> \n//     </React.Fragment>,\n//     document.getElementById(\"root\")             \n//     );\n// <--------another way of to write \"React.Fragmant\"  is \"<> </>\"----------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n// <>\n//     <h1> this is my hello world program </h1>\n//     <p> this is my </p>   \n//     <h2> this is my hello world program </h2> \n//     </>,\n//     document.getElementById(\"root\")             \n//     );\n//<--------------------- program end-------------------->\n//<--------------------- challenge-1-------------------->\n//(1) create a react app from scratch\n//(2) add one  h1 element in it \n//(3)add one p element init\n//(4) add list of fav 5 netflix serise in it using an order list\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(\n//     <>\n//     <h1> this is h1 element</h1>\n//     <p> this is a paragraph element</p>\n//     <ol>\n//         <li>hero</li>\n//         <li>dil</li>\n//         <li>janvar</li>\n//         <li>hum app kai hai kom</li>\n//         <li> tu mera hero</li>\n//     </ol>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- Expressions in jsx-------------------->\n// to use javascript inside html element we use \"{}\"\n// Note: inside the curly bracess \"{}\" we can use only expressions but not statements like if , else etc \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n//  const myname= \"sameer\";\n//  const luckynum=52;\n//  const a =12;\n//  const b =55;\n// ReactDOM.render(\n//     <>\n//     <h1> my name is {myname}</h1>\n//     <p>my luckey number is {luckynum}</p>\n//     <h2> the additon of a and b is {a+b}</h2>\n//     <p> any random number is {Math.random()}</p>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- ES6 Template Literals in jsx-------------------->\n// in Template Literals we use backtick(`) instad of double(\"\") or single('') quations \n// with Template Literals we add or sub two num without storing it in a variable \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const fname =\"sameer\";\n// const lname =\"ali\";\n// ReactDOM.render(\n//     <h1> my name is {fname} {lname}</h1>, // (or) <h1> my name is {fname +\" \"+ lname}</h1> are old way now we have template literals\n//     document.getElementById(\"root\")\n// );\n//  Template Literals program \n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const fname =\"sameer\";\n// const lname =\"ali\";\n// ReactDOM.render(\n//     <>\n//      <h1> my name is {`${fname} ${lname}`}</h1>  (or)\n//     <h2>{` my name is ${fname} ${lname}`}</h2>\n//     <p> adding two numbers {`${8+9}`}</p>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- challenge-2-------------------->\n//(1) create a react app from scratch\n//(2) add one  h1 element in it \n//(3)add one p element init with current date\n//(4)add one p element init with current time \n//Note :new Date() is not just gives the date but also time  if we only date we can use new Date().tolocaleDateString().....\n//for only time new Date().tolocaleTimeString()\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n// const currDate=new Date().toLocaleDateString();\n// const currTime =new Date().toLocaleTimeString();\n// ReactDOM.render(\n//     <>\n//     <h2>{` my name is ${name}`}</h2>\n//     <p> current date is ={`${currDate}`}</p>\n//     <p> current time  is= {`${currTime}`}</p>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- attributes in jsx-------------------->\n//<a href=\"\" target=\"\"></a> here href and target is an attribute in html \n// Note: attribute name is must be in camel case \n// \"contentEditable\" it give as the power to editit the text\n// in <img> tag if we are not writing anything inside <img></img> tag we can close  useing self closing tag </img>\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n// ReactDOM.render(\n//     <>\n//     <h1 contentEditable=\"true\">my name is {name }</h1>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n//<--------------------- css  in jsx-------------------->\n//NOTE:IN  react we use \"className\" instad of just \"class\" ans it has to be in camelcase \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import  './/index.css';\n// const name =\"sameer\";\n// ReactDOM.render(\n//     <>\n//     <h1 className=\"mycall\">MY NAME IS {name}</h1>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n//<--------------------- inline css jsx-------------------->\n// Note:bydefault css properties are in kebab case(text-transform) to use it in  jsx inline css....\n// we have to write it in camel case(textTransform) \n//Note: in inline css we use \"\"  and , were in normal css we dont \n// in jsx css conider every thing as an object\n// const car={ \n//color = \"red\",\n//brand = \"ford\"\n//}\n// const mycall={ \n//fontSize = \"red\",\n//backgroundColor = \"red\"\n//}\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n// ReactDOM.render(\n//     <>\n//     <h1 style={{color: \"aquamarine\",textAlign: \"center\",  textTransform: \"capitalize\",  fontWeight: \"bold\"}}>my name is {name}</h1>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------or-------------------->\n//<---------------------another way  -------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n// const mycall={                     // here we have created an object and writen css code inside it \n//      color: \"aquamarine\",\n//      textAlign: \"center\", \n//      textTransform: \"capitalize\", \n//      fontWeight: \"bold\"\n// }\n// ReactDOM.render(\n//     <>\n//     <h1 style={mycall}>my name is {name}</h1> \n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n//<--------------------- challenge-3-------------------->\n// create a react app from scratch\n//show a heading that says hellow sir, good morning, if time is between 1 to 11am \n//good afternoon if 12pm to 7pm\n// good night if 7pm till midnight \n// Note: \"new Date()\" object is combination of Day ,Date and time\n// if we want just date  we write \"new Date().tolocaleDateString()\" and for time \"new Date().tolocaleTimeString()\" and \n//just for hours \" new Date().getHours();\"\n//just for seconds \" new Date().getSecondss();\"\n// WE can also define our own date  and time Eg:\"new Date(2020,12,31,8)\"\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// let currDate = new Date().getHours();\n//     const myCss={};                                // css object\n//     let gretting =\"\";\n//     if(currDate>=1 && currDate<12){\n//         gretting =\"Good Morning\";\n//         myCss.color=\"green \"\n//     }\n//     else if(currDate>=12 && currDate<19){\n//         gretting =\"Good Evening\";\n//         myCss.color=\"red \"\n//     }\n//     else{\n//         gretting =\"Good Night\";\n//         myCss.color=\"blue \"\n//     }\n// ReactDOM.render(\n//     <>\n//          <h1 > Hello sameer,<span style={myCss}>{gretting}</span></h1> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n//<--------------------- components in jsx-------------------->\n//Note : the first letter of component name should be in capital like \"Mycompo\"\n//Note : we components can be return as \" <Mycompo></Mycompo>\" or.....\n// if we dont have any thing inside \" <Mycompo></Mycompo>\" tag then we can use self closing tag  \"<Mycompo/>\"\n//<--------------------- program start-------------------->\n//<--------------------- step one-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// ReactDOM.render(\n//         <>\n//         <h1>my name is  sameer ali</h1>\n//              <h2>im a software engineer( this is component 2)</h2>\n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n//<--------------------- step two(creating component 1)-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// ReactDOM.render(\n//         <>\n//        <Mycompo/>        \n//              <h2>im a software engineer( this is component 2)</h2>\n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n//<--------------------- step three-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// import Mycom2 from './Mycom2';\n// ReactDOM.render(\n//         <>\n//        <Mycompo/> \n//        <Mycom2/>        \n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n//<--------------------- step four(list component)-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// import Mycom2 from './Mycom2';\n// import Mycomlist from './Mycomlist';\n// ReactDOM.render(\n//         <>\n//        <Mycompo/> \n//        <Mycom2/>    \n//        <Mycomlist/>    \n//         </>,\n//         document.getElementById(\"root\")\n// );\n//<--------------------- step five (app.js)-------------------->\n// let us creata an app.jsx file and save all the component inside it \n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Myapp from \"./Myapp\";\n// ReactDOM.render(<Myapp/>,document.getElementById(\"root\"));\n//<--------------------- program end-------------------->\n//<--------------------- challenge-4-------------------->\n// create a react app from scratch\n//show a heading that says hellow sir, good morning, if time is between 1 to 11am \n//good afternoon if 12pm to 7pm\n// good night if 7pm till midnight\n// Note: The first letter of the component name  must  capital \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Chall4 from './Mycomponent/Chall4';\n// ReactDOM.render(\n//     <>\n//          <Chall4/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- Export and Import in jsx-------------------->\n// IMPORT : means LAY NA (recoving)\n//Export : BHAJ NA(sending)\n// what ever data we  get in \"var\" not in \"component\" we get in the form of objects for that we use \"{}\"\n//Note : \"default\" value can be used for only one variable \n// we can import everything as an object using  import \" *  as any randam name\" from './Mycomponent/Impexp1';\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n//  import  favyoutuber,{course,lname,wife,myself} from './Mycomponent/Impexp1';  \n// // import * from './Mycomponent/Impexp1';\n// ReactDOM.render(\n//     <>\n//     <ol>\n//         <li>sameer </li>\n//         <li>{favyoutuber}</li>\n//         <li>{course}</li>\n//         <li>{lname}</li>\n//         <li> { wife}</li>\n//         <li>{myself()}</li>\n//     </ol>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n// <----------------another way --------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import * as sameer  from '.cImpexp1';\n// ReactDOM.render(\n//     <>\n//     <ol>\n//         <li>sameer </li>\n//         <li>{sameer.default}</li>\n//         <li>{sameer.course}</li>\n//         <li>{sameer.lname}</li>\n//         <li> { sameer.wife}</li>\n//         <li>{sameer.myself()}</li>\n//     </ol>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- challenge-4(calculator)-------------------->\n// \"sum\" is a result of adding two numbers \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import add , {sub,divi,multi} from './Mycomponent/Calculator';\n// ReactDOM.render(\n//   <>\n//     <ul>\n//         <li> sum of two number is {add ( 10, 10 )} </li>\n//         <li> sub of two number is {sub ( 10, 10 )} </li> \n//         <li> division  of two number is {divi ( 10, 10 )} </li> \n//         <li>multipliction  of two number is {multi ( 10, 10 )} </li> \n//     </ul>\n//   </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- challenge-5(Netflex app)--------------------> \n//Note : attribute are also know as propertis eg <input type=\"text\" value=\"sameer\"> here type and value are attributes\n//Note: \"props\"(which is stands for propertis) it  allow as to  defined  our own attribute  \n// react \"props\" are like function arguments in javascript and attribute in HTML\n//<--------------------- program start-------------------->\n//  import React from \"react\";\n//  import  ReactDOM  from \"react-dom\";\n//  import Navi from  './Mycomponent/Cnavcomponent';\n//  ReactDOM.render(\n//      <>\n//       <div>\n//     <div className=\"navigation\"><Navi  /></div>\n//     <div className=\"main\">main-component</div>\n//     <div className=\"footer\">footer-component</div>\n//     </div> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- challenge-6 (sloat machine )--------------------> \n//<--------------------- program start-------------------->\n//  import React from \"react\";\n//  import  ReactDOM  from \"react-dom\";\n//  import Slot, {SlotM} from './Mycomponent/Slotmechine';\n//  ReactDOM.render(\n//          <>\n//          <Slot/>\n//          <SlotM/>\n//         </>,\n//      document.getElementById(\"root\")\n//  );\n//  const Slot =()=>{\n//     return<>\n//         <h1 className=\"heading\">\n//          🎰 welcome to <span style={ {fontWeight : \"bold\"}}> Slot machine game</span> 🎰</h1>\n//          <div>\n//          </div>\n//     </>\n// }\n//<--------------------- program end-------------------->\n//<---------------------Hookes in jsx-------------------> \n// it allow you to state and other react features without writing a class,\n// Hooks are the functions which \"hook into \" to react state and lifecycle featurea from functions components\n// Note : we cant use \"HOOKS \" INSIDE classes and it should be used at the top level of the react functions \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(\n//       <h1></h1>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<---------------------alert box-------------------->\n//<--------------------- program start-------------------->\n// const mycall={                     // here we have created an object and writen css code inside it \n//      color: \"aquamarine\",\n//      textAlign: \"center\", \n//      textTransform: \"capitalize\", \n//      fontWeight: \"bold\"\n// }\n// import React from \"react\";\n// import  ReactDOM from \"react-dom\";\n//  let cssmy={\n//      textAlign:\"center\",\n//      color:\"red\"\n//  }\n//  function Alert(){\n//     alert(\"hello sameer ali how are you\");\n//  }\n// ReactDOM.render(\n// <>\n// <h1  style={cssmy}> alert in jsx</h1>\n// <button onClick={Alert}    style={cssmy}>Click me</button>\n// </>,\n// document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n//<--------------------- function and class components-------------------->\n//<--------------------- program start-------------------->\n//Class Component\n//A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, \n//and gives your component access to React.Component's functions.\n//The component also requires a render() method, this method returns HTML.\n//Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered \"state-less\".\n//\n//With the addition of Hooks, Function components are now almost equivalent to Class components. \n//The differences are so minor that you will probably never need to use a Class component in React.\n//Feel free to skip this class component, and use Function Components instead.\n// Example\n// Create a function component called Car\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(                        // calling  a function component\n//     <>\n//     <h1></h1>\n//     <Car/> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n// function Car() {                     //created a function component\n//   return <h2>Hi, I am a Car! and it  is  writen  function components</h2>;\n// }\n//<--------------------- program end-------------------->\n//<--------------------- props in jsx-------------------->\n//Props are arguments passed into React components.\n//Props are passed to components via HTML attributes.\n//props stands for properties.\n//React Props are like function arguments in JavaScript and attributes in HTML.\n//To send props into a component, use the same syntax as HTML attributes:\n// \"props\" give you the power to create your own attributes \n//<--------------Example------------------->\n//Add a \"brand\" attribute to the Car element:\n//  \" const myElement = <Car brand=\"Ford\" />;    \"\n// here  \"Car\" is component and \"brand \"  is a self declared attribute\n//let us see how to use this self made attribute (brand) \n//<--------------------- program start-------------------->\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n// const myElement = <Car brand=\"Ford\" />;\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(myElement);\n//<---------------------  (or 🤣) another way-------------------->\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n// ReactDOM.render(                       \n//     <>\n//     <h1></h1>\n//     <Car brand=\"Ford\"/> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- example-2------------------->\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Fname (props){\n// return <h1> MY FULL NAME IS SAMEER {props.lname}</h1>\n// }\n// ReactDOM.render(\n//     <>\n//      <Fname  lname=\"ali\" />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n// <--------------------------Pass Data in props----------------->\n//Props are also how you pass data from one component to another, as parameters.\n//Example :- \n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n// function Garage() {\n//   return (\n//     <>\n// \t    <h1>Who lives in my garage?</h1>\n//         <Car brand=\"Ford\" />\n//     </>\n//   );\n// }\n// ReactDOM.render(\n//     <>\n//      <Garage />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n// If you have a 🥇variable to send, and not a 🥈string as in the example above, you just put the variable name inside curly brackets:\n//<------------------------Example---------------------->\n// Create a variable named 👍\"carName\" 👍 and send it to the Car component:\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//     return <h2>I am a { props.brand }!</h2>;\n//   }\n//   function Garage() {\n//     const carName = \"Ford\";      //  this is a variable \n//     return (\n//       <>\n//         <h1>Who lives in my garage?</h1>\n//         <Car brand={ carName } />\n//       </>\n//     );\n//   }\n//    ReactDOM.render(\n//         <>\n//          <Garage />\n//         </>,\n//         document.getElementById(\"root\")\n//     );\n// <-------------Or if it was an object:-------------->\n// Example\n// Create an object named carInfo and send it to the Car component:\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//   return <h2>I am a { props.brand.model }!</h2>;\n// }\n// function Garage() {\n//   const carInfo = { name: \"Ford\", model: \"Mustang\" };\n//   return (\n//     <>\n//       <h1>Who lives in my garage?</h1>\n//       <Car brand={ carInfo } />\n//     </>\n//   );\n// }\n// ReactDOM.render(\n//             <>\n//              <Garage />\n//             </>,\n//             document.getElementById(\"root\")\n//         );\n//<--------------------- program end-------------------->\n//<--------------------- React Events-------------------->\n//Just like HTML DOM events, React can perform actions based on user events.\n//React has the same events as HTML: click, change, mouseover etc.\n//Note :-\n// React events are written in camelCase syntax:  \"onClick\" instead of \"onclick\".\n// React event handlers are written inside \"curly braces\": onClick={shoot}  instead of onClick=\"shoot()\".\n//<--------------------- program start-------------------->\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Football() {\n//     const shoot = () => {                                       //or  function shoot(){\n//       alert(\"Great Shot!\");                                     //alert(\"greate shot sameer \");  }  \n//    }\n//     return (\n//       <button onClick={shoot}>Take the shot!</button>\n//     );\n//   }\n// ReactDOM.render(\n//     <>\n//      <Football />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<-------------------my way----------------->\n// import React  from 'react';\n// import ReactDOM from 'react-dom';\n// function Football(){\n//     function shoot(){\n// alert(\"greate shot sameer \");\n//     }\n//     return(<button onClick={shoot}> kick me </button>);\n// }\n// ReactDOM.render(\n//     <>\n//      <Football/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------Passing Arguments------------------------->\n//To pass an argument to an event handler, use an arrow function.\n//Example:\n//Send \"Goal!\" as a parameter to the shoot function, using arrow function:\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Football() {\n  function shoot(a) {\n    alert(a);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: () => shoot(\"Goal!\"),\n    children: \"Take the shot!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 1007,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Football;\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(Football, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 1014,\n  columnNumber: 13\n}, this)); //<--------------------- program end-------------------->\n\nvar _c;\n\n$RefreshReg$(_c, \"Football\");","map":{"version":3,"names":["React","ReactDOM","Football","shoot","a","alert","root","createRoot","document","getElementById","render"],"sources":["C:/Users/samali tech/samreact/src/index.js"],"sourcesContent":["\n//hello world in react\n// \"render\" is a method, it is use for showing the output \n// Note : uncomment the program  to use it \n// Note : \n//<---------------------start-------------------->\n\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n\n\n// ReactDOM.render(                                 // \"reactDom\"  is a package and render is   a method  or function \n//     <h1> this is my hello world program </h1>,  //what to show\n//     document.getElementById(\"root\")             // where to show \n// );\n\n//<--------------------- end-------------------->\n\n\n// Note : uncomment the program  to use it \n//hello world in react\n\n\n\n\n\n\n// <-----------multipul element in jsx----------->\n//\"JSX\"  Stands for javascript XML\n//\"XML\" Extensible markedup language\n// Note: \"JSX\" it is a combination of javascript and htm\n//we have one h1 element  and now i want to add on <p> element but onece we add <p>element it wil show as error bcz render method ...\n//only accept one  element so we use one <div>or array of an element\"[]\" element as parent element\n//<--------------------- program start-------------------->\n// import React, { Fragment } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n//     <div>\n//     <h1> this is my hello world program </h1>, \n//     <p> this is my hello world program </p>,    \n//     <h2> this is my hello world program </h2>, \n//     </div>,\n//     document.getElementById(\"root\")             \n                                                \n//     );\n//<--------------------- program end-------------------->\n                \n\n\n\n\n\n// <-----------React.Fragment element in jsx----------->\n//in the place of \"div\" element we can use fragment element bcz div(root) inside div(parent element) take  extra spacea to solve...\n// this problam we use \"React.Fragmant\" element\n//React.Fragment is faster and less  memory consuming as compared to div\n//Note: the first letter of \"React.Fragment\" must be capital\n\n//<--------------------- program start-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n\n// <React.Fragment>\n//     <h1> this is my hello world program </h1>\n//     <p> this is my hello world pS </p>   \n//     <h2> this is my hello world program </h2> \n//     </React.Fragment>,\n//     document.getElementById(\"root\")             \n                                                \n//     );\n// <--------another way of to write \"React.Fragmant\"  is \"<> </>\"----------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render( \n\n// <>\n//     <h1> this is my hello world program </h1>\n//     <p> this is my </p>   \n//     <h2> this is my hello world program </h2> \n//     </>,\n//     document.getElementById(\"root\")             \n                                                \n//     );\n//<--------------------- program end-------------------->\n\n\n\n\n//<--------------------- challenge-1-------------------->\n//(1) create a react app from scratch\n//(2) add one  h1 element in it \n//(3)add one p element init\n//(4) add list of fav 5 netflix serise in it using an order list\n//<--------------------- program start-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(\n//     <>\n//     <h1> this is h1 element</h1>\n//     <p> this is a paragraph element</p>\n//     <ol>\n//         <li>hero</li>\n//         <li>dil</li>\n//         <li>janvar</li>\n//         <li>hum app kai hai kom</li>\n//         <li> tu mera hero</li>\n\n//     </ol>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n//<--------------------- Expressions in jsx-------------------->\n// to use javascript inside html element we use \"{}\"\n// Note: inside the curly bracess \"{}\" we can use only expressions but not statements like if , else etc \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n//  const myname= \"sameer\";\n//  const luckynum=52;\n//  const a =12;\n//  const b =55;\n\n// ReactDOM.render(\n//     <>\n//     <h1> my name is {myname}</h1>\n//     <p>my luckey number is {luckynum}</p>\n//     <h2> the additon of a and b is {a+b}</h2>\n//     <p> any random number is {Math.random()}</p>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n//<--------------------- ES6 Template Literals in jsx-------------------->\n// in Template Literals we use backtick(`) instad of double(\"\") or single('') quations \n// with Template Literals we add or sub two num without storing it in a variable \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const fname =\"sameer\";\n// const lname =\"ali\";\n// ReactDOM.render(\n\n//     <h1> my name is {fname} {lname}</h1>, // (or) <h1> my name is {fname +\" \"+ lname}</h1> are old way now we have template literals\n\n//     document.getElementById(\"root\")\n// );\n//  Template Literals program \n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const fname =\"sameer\";\n// const lname =\"ali\";\n// ReactDOM.render(\n//     <>\n//      <h1> my name is {`${fname} ${lname}`}</h1>  (or)\n//     <h2>{` my name is ${fname} ${lname}`}</h2>\n//     <p> adding two numbers {`${8+9}`}</p>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n//<--------------------- challenge-2-------------------->\n//(1) create a react app from scratch\n//(2) add one  h1 element in it \n//(3)add one p element init with current date\n//(4)add one p element init with current time \n//Note :new Date() is not just gives the date but also time  if we only date we can use new Date().tolocaleDateString().....\n//for only time new Date().tolocaleTimeString()\n//<--------------------- program start-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n// const currDate=new Date().toLocaleDateString();\n// const currTime =new Date().toLocaleTimeString();\n\n\n// ReactDOM.render(\n//     <>\n//     <h2>{` my name is ${name}`}</h2>\n//     <p> current date is ={`${currDate}`}</p>\n//     <p> current time  is= {`${currTime}`}</p>\n\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n//<--------------------- attributes in jsx-------------------->\n//<a href=\"\" target=\"\"></a> here href and target is an attribute in html \n// Note: attribute name is must be in camel case \n// \"contentEditable\" it give as the power to editit the text\n// in <img> tag if we are not writing anything inside <img></img> tag we can close  useing self closing tag </img>\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// const name =\"sameer\";\n\n\n\n// ReactDOM.render(\n//     <>\n//     <h1 contentEditable=\"true\">my name is {name }</h1>\n\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n\n\n\n\n//<--------------------- css  in jsx-------------------->\n//NOTE:IN  react we use \"className\" instad of just \"class\" ans it has to be in camelcase \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import  './/index.css';\n\n// const name =\"sameer\";\n\n// ReactDOM.render(\n//     <>\n//     <h1 className=\"mycall\">MY NAME IS {name}</h1>\n\n//     </>,\n//      document.getElementById(\"root\")\n// );\n//<---------------------end -------------------->\n\n\n\n//<--------------------- inline css jsx-------------------->\n// Note:bydefault css properties are in kebab case(text-transform) to use it in  jsx inline css....\n// we have to write it in camel case(textTransform) \n//Note: in inline css we use \"\"  and , were in normal css we dont \n// in jsx css conider every thing as an object\n// const car={ \n    //color = \"red\",\n    //brand = \"ford\"\n\n//}\n// const mycall={ \n    //fontSize = \"red\",\n    //backgroundColor = \"red\"\n\n//}\n//<--------------------- program start-------------------->\n\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n\n// const name =\"sameer\";\n\n\n\n// ReactDOM.render(\n//     <>\n    \n//     <h1 style={{color: \"aquamarine\",textAlign: \"center\",  textTransform: \"capitalize\",  fontWeight: \"bold\"}}>my name is {name}</h1>\n//     </>,\n//      document.getElementById(\"root\")\n// );\n\n\n//<---------------------or-------------------->\n//<---------------------another way  -------------------->\n\n\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n\n// const name =\"sameer\";\n// const mycall={                     // here we have created an object and writen css code inside it \n//      color: \"aquamarine\",\n//      textAlign: \"center\", \n//      textTransform: \"capitalize\", \n//      fontWeight: \"bold\"\n// }\n\n\n// ReactDOM.render(\n//     <>\n    \n//     <h1 style={mycall}>my name is {name}</h1> \n//     </>,\n//      document.getElementById(\"root\")\n// );\n\n\n\n//<---------------------end -------------------->\n\n\n\n\n\n//<--------------------- challenge-3-------------------->\n// create a react app from scratch\n//show a heading that says hellow sir, good morning, if time is between 1 to 11am \n//good afternoon if 12pm to 7pm\n// good night if 7pm till midnight \n// Note: \"new Date()\" object is combination of Day ,Date and time\n// if we want just date  we write \"new Date().tolocaleDateString()\" and for time \"new Date().tolocaleTimeString()\" and \n//just for hours \" new Date().getHours();\"\n//just for seconds \" new Date().getSecondss();\"\n// WE can also define our own date  and time Eg:\"new Date(2020,12,31,8)\"\n//<--------------------- program start-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// let currDate = new Date().getHours();\n    \n//     const myCss={};                                // css object\n//     let gretting =\"\";\n\n//     if(currDate>=1 && currDate<12){\n//         gretting =\"Good Morning\";\n//         myCss.color=\"green \"\n//     }\n\n//     else if(currDate>=12 && currDate<19){\n//         gretting =\"Good Evening\";\n//         myCss.color=\"red \"\n//     }\n\n//     else{\n//         gretting =\"Good Night\";\n//         myCss.color=\"blue \"\n\n//     }\n    \n// ReactDOM.render(\n//     <>\n//          <h1 > Hello sameer,<span style={myCss}>{gretting}</span></h1> \n//     </>,\n//     document.getElementById(\"root\")\n\n// );\n\n//<---------------------end -------------------->\n\n\n\n\n\n\n\n//<--------------------- components in jsx-------------------->\n//Note : the first letter of component name should be in capital like \"Mycompo\"\n //Note : we components can be return as \" <Mycompo></Mycompo>\" or.....\n // if we dont have any thing inside \" <Mycompo></Mycompo>\" tag then we can use self closing tag  \"<Mycompo/>\"\n//<--------------------- program start-------------------->\n//<--------------------- step one-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n\n\n// ReactDOM.render(\n//         <>\n//         <h1>my name is  sameer ali</h1>\n//              <h2>im a software engineer( this is component 2)</h2>\n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n\n//<--------------------- step two(creating component 1)-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n\n\n// ReactDOM.render(\n//         <>\n//        <Mycompo/>        \n//              <h2>im a software engineer( this is component 2)</h2>\n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n\n//<--------------------- step three-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// import Mycom2 from './Mycom2';\n\n\n// ReactDOM.render(\n//         <>\n//        <Mycompo/> \n//        <Mycom2/>        \n//              <ol>( this is component 3)\n//                  <li>web developer</li>\n//                  <li>fullstack developer</li>\n//                  <li>javascript developer</li>\n//                  <li>react developer</li>\n\n//              </ol>\n//         </>,\n//         document.getElementById(\"root\")\n// );\n\n//<--------------------- step four(list component)-------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Mycompo from './Mycompo';\n// import Mycom2 from './Mycom2';\n// import Mycomlist from './Mycomlist';\n// ReactDOM.render(\n//         <>\n//        <Mycompo/> \n//        <Mycom2/>    \n//        <Mycomlist/>    \n             \n//         </>,\n//         document.getElementById(\"root\")\n// );\n\n//<--------------------- step five (app.js)-------------------->\n// let us creata an app.jsx file and save all the component inside it \n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Myapp from \"./Myapp\";\n\n// ReactDOM.render(<Myapp/>,document.getElementById(\"root\"));\n//<--------------------- program end-------------------->\n\n\n\n\n\n//<--------------------- challenge-4-------------------->\n// create a react app from scratch\n//show a heading that says hellow sir, good morning, if time is between 1 to 11am \n//good afternoon if 12pm to 7pm\n// good night if 7pm till midnight\n// Note: The first letter of the component name  must  capital \n\n//<--------------------- program start-------------------->\n\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import Chall4 from './Mycomponent/Chall4';\n    \n// ReactDOM.render(\n//     <>\n//          <Chall4/>\n//     </>,\n//     document.getElementById(\"root\")\n\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n//<--------------------- Export and Import in jsx-------------------->\n// IMPORT : means LAY NA (recoving)\n//Export : BHAJ NA(sending)\n// what ever data we  get in \"var\" not in \"component\" we get in the form of objects for that we use \"{}\"\n//Note : \"default\" value can be used for only one variable \n// we can import everything as an object using  import \" *  as any randam name\" from './Mycomponent/Impexp1';\n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n//  import  favyoutuber,{course,lname,wife,myself} from './Mycomponent/Impexp1';  \n// // import * from './Mycomponent/Impexp1';\n\n\n// ReactDOM.render(\n//     <>\n//     <ol>\n//         <li>sameer </li>\n//         <li>{favyoutuber}</li>\n//         <li>{course}</li>\n//         <li>{lname}</li>\n//         <li> { wife}</li>\n//         <li>{myself()}</li>\n       \n//     </ol>\n         \n//     </>,\n//     document.getElementById(\"root\")\n\n// );\n\n// <----------------another way --------------------->\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import * as sameer  from '.cImpexp1';\n\n\n// ReactDOM.render(\n//     <>\n//     <ol>\n//         <li>sameer </li>\n//         <li>{sameer.default}</li>\n//         <li>{sameer.course}</li>\n//         <li>{sameer.lname}</li>\n//         <li> { sameer.wife}</li>\n//         <li>{sameer.myself()}</li>\n       \n//     </ol>\n         \n//     </>,\n//     document.getElementById(\"root\")\n\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n//<--------------------- challenge-4(calculator)-------------------->\n// \"sum\" is a result of adding two numbers \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import ReactDOM from \"react-dom\";\n// import add , {sub,divi,multi} from './Mycomponent/Calculator';\n// ReactDOM.render(\n//   <>\n//     <ul>\n//         <li> sum of two number is {add ( 10, 10 )} </li>\n//         <li> sub of two number is {sub ( 10, 10 )} </li> \n//         <li> division  of two number is {divi ( 10, 10 )} </li> \n//         <li>multipliction  of two number is {multi ( 10, 10 )} </li> \n//     </ul>\n//   </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n//<--------------------- challenge-5(Netflex app)--------------------> \n//Note : attribute are also know as propertis eg <input type=\"text\" value=\"sameer\"> here type and value are attributes\n//Note: \"props\"(which is stands for propertis) it  allow as to  defined  our own attribute  \n// react \"props\" are like function arguments in javascript and attribute in HTML\n//<--------------------- program start-------------------->\n//  import React from \"react\";\n//  import  ReactDOM  from \"react-dom\";\n\n//  import Navi from  './Mycomponent/Cnavcomponent';\n\n\n\n//  ReactDOM.render(\n//      <>\n//       <div>\n//     <div className=\"navigation\"><Navi  /></div>\n//     <div className=\"main\">main-component</div>\n//     <div className=\"footer\">footer-component</div>\n\n//     </div> \n  \n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n\n\n\n\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n//<--------------------- challenge-6 (sloat machine )--------------------> \n//<--------------------- program start-------------------->\n//  import React from \"react\";\n//  import  ReactDOM  from \"react-dom\";\n//  import Slot, {SlotM} from './Mycomponent/Slotmechine';\n\n\n//  ReactDOM.render(\n//          <>\n         \n//          <Slot/>\n//          <SlotM/>\n\n//         </>,\n//      document.getElementById(\"root\")\n//  );\n\n//  const Slot =()=>{\n//     return<>\n//         <h1 className=\"heading\">\n//          🎰 welcome to <span style={ {fontWeight : \"bold\"}}> Slot machine game</span> 🎰</h1>\n//          <div>\n\n         \n//          </div>\n//     </>\n// }\n\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n\n//<---------------------Hookes in jsx-------------------> \n// it allow you to state and other react features without writing a class,\n// Hooks are the functions which \"hook into \" to react state and lifecycle featurea from functions components\n// Note : we cant use \"HOOKS \" INSIDE classes and it should be used at the top level of the react functions \n//<--------------------- program start-------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(\n//       <h1></h1>,\n\n\n//     document.getElementById(\"root\")\n// );\n\n\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n//<---------------------alert box-------------------->\n//<--------------------- program start-------------------->\n\n\n// const mycall={                     // here we have created an object and writen css code inside it \n    //      color: \"aquamarine\",\n    //      textAlign: \"center\", \n    //      textTransform: \"capitalize\", \n    //      fontWeight: \"bold\"\n    // }\n\n// import React from \"react\";\n// import  ReactDOM from \"react-dom\";\n\n//  let cssmy={\n//      textAlign:\"center\",\n//      color:\"red\"\n     \n//  }\n//  function Alert(){\n  \n//     alert(\"hello sameer ali how are you\");\n\n//  }\n\n\n// ReactDOM.render(\n\n// <>\n// <h1  style={cssmy}> alert in jsx</h1>\n// <button onClick={Alert}    style={cssmy}>Click me</button>\n\n\n// </>,\n// document.getElementById(\"root\")\n\n// );\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n//<--------------------- function and class components-------------------->\n//<--------------------- program start-------------------->\n//Class Component\n//A class component must include the extends React.Component statement. This statement creates an inheritance to React.Component, \n//and gives your component access to React.Component's functions.\n//The component also requires a render() method, this method returns HTML.\n//Before React 16.8, Class components were the only way to track state and lifecycle on a React component. Function components were considered \"state-less\".\n//\n//With the addition of Hooks, Function components are now almost equivalent to Class components. \n//The differences are so minor that you will probably never need to use a Class component in React.\n//Feel free to skip this class component, and use Function Components instead.\n// Example\n// Create a function component called Car\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// ReactDOM.render(                        // calling  a function component\n//     <>\n//     <h1></h1>\n//     <Car/> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n\n// function Car() {                     //created a function component\n//   return <h2>Hi, I am a Car! and it  is  writen  function components</h2>;\n// }\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n//<--------------------- props in jsx-------------------->\n//Props are arguments passed into React components.\n//Props are passed to components via HTML attributes.\n//props stands for properties.\n//React Props are like function arguments in JavaScript and attributes in HTML.\n//To send props into a component, use the same syntax as HTML attributes:\n// \"props\" give you the power to create your own attributes \n\n//<--------------Example------------------->\n//Add a \"brand\" attribute to the Car element:\n\n//  \" const myElement = <Car brand=\"Ford\" />;    \"\n// here  \"Car\" is component and \"brand \"  is a self declared attribute\n//let us see how to use this self made attribute (brand) \n\n//<--------------------- program start-------------------->\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n\n// const myElement = <Car brand=\"Ford\" />;\n\n\n// const root = ReactDOM.createRoot(document.getElementById('root'));\n// root.render(myElement);\n\n\n\n//<---------------------  (or 🤣) another way-------------------->\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n// ReactDOM.render(                       \n//     <>\n//     <h1></h1>\n//     <Car brand=\"Ford\"/> \n//     </>,\n//     document.getElementById(\"root\")\n// );\n//<--------------------- example-2------------------->\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Fname (props){\n\n// return <h1> MY FULL NAME IS SAMEER {props.lname}</h1>\n// }\n\n// ReactDOM.render(\n//     <>\n//      <Fname  lname=\"ali\" />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n\n// <--------------------------Pass Data in props----------------->\n//Props are also how you pass data from one component to another, as parameters.\n\n//Example :- \n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// function Car(props) {\n//   return <h2>I am a { props.brand }!</h2>;\n// }\n\n// function Garage() {\n//   return (\n//     <>\n// \t    <h1>Who lives in my garage?</h1>\n//         <Car brand=\"Ford\" />\n//     </>\n//   );\n// }\n// ReactDOM.render(\n//     <>\n//      <Garage />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n// If you have a 🥇variable to send, and not a 🥈string as in the example above, you just put the variable name inside curly brackets:\n//<------------------------Example---------------------->\n// Create a variable named 👍\"carName\" 👍 and send it to the Car component:\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n// function Car(props) {\n//     return <h2>I am a { props.brand }!</h2>;\n//   }\n  \n//   function Garage() {\n//     const carName = \"Ford\";      //  this is a variable \n//     return (\n//       <>\n//         <h1>Who lives in my garage?</h1>\n//         <Car brand={ carName } />\n//       </>\n//     );\n//   }\n  \n\n//    ReactDOM.render(\n//         <>\n//          <Garage />\n//         </>,\n//         document.getElementById(\"root\")\n//     );\n\n    // <-------------Or if it was an object:-------------->\n\n    // Example\n    // Create an object named carInfo and send it to the Car component:\n    // import React from 'react';\n    // import ReactDOM from 'react-dom';\n    \n    // function Car(props) {\n    //   return <h2>I am a { props.brand.model }!</h2>;\n    // }\n    \n    // function Garage() {\n    //   const carInfo = { name: \"Ford\", model: \"Mustang\" };\n    //   return (\n    //     <>\n    //       <h1>Who lives in my garage?</h1>\n    //       <Car brand={ carInfo } />\n    //     </>\n    //   );\n    // }\n    // ReactDOM.render(\n    //             <>\n    //              <Garage />\n    //             </>,\n    //             document.getElementById(\"root\")\n    //         );\n    \n\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n//<--------------------- React Events-------------------->\n//Just like HTML DOM events, React can perform actions based on user events.\n//React has the same events as HTML: click, change, mouseover etc.\n//Note :-\n// React events are written in camelCase syntax:  \"onClick\" instead of \"onclick\".\n// React event handlers are written inside \"curly braces\": onClick={shoot}  instead of onClick=\"shoot()\".\n//<--------------------- program start-------------------->\n\n\n// import React from 'react';\n// import ReactDOM from 'react-dom';\n\n// function Football() {\n //     const shoot = () => {                                       //or  function shoot(){\n//       alert(\"Great Shot!\");                                     //alert(\"greate shot sameer \");  }  \n//    }\n  \n//     return (\n//       <button onClick={shoot}>Take the shot!</button>\n//     );\n//   }\n  \n// ReactDOM.render(\n//     <>\n//      <Football />\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n\n//<-------------------my way----------------->\n// import React  from 'react';\n// import ReactDOM from 'react-dom';\n\n\n// function Football(){\n//     function shoot(){\n\n// alert(\"greate shot sameer \");\n//     }\n//     return(<button onClick={shoot}> kick me </button>);\n// }\n\n\n// ReactDOM.render(\n\n//     <>\n//      <Football/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<--------------------Passing Arguments------------------------->\n//To pass an argument to an event handler, use an arrow function.\n\n//Example:\n//Send \"Goal!\" as a parameter to the shoot function, using arrow function:\n\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nfunction Football() {\n function shoot(a){\n    alert(a);\n\n    \n\n }\nreturn (\n    <button onClick={() => shoot(\"Goal!\")}>Take the shot!</button>\n  \n\n  );\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Football />);\n\n\n//<--------------------- program end-------------------->\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappingskB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;;AAEA,SAASC,QAAT,GAAoB;EACnB,SAASC,KAAT,CAAeC,CAAf,EAAiB;IACdC,KAAK,CAACD,CAAD,CAAL;EAIF;;EACF,oBACI;IAAQ,OAAO,EAAE,MAAMD,KAAK,CAAC,OAAD,CAA5B;IAAA;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAKC;;KAZQD,Q;AAcT,MAAMI,IAAI,GAAGL,QAAQ,CAACM,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eAAY,QAAC,QAAD;EAAA;EAAA;EAAA;AAAA,QAAZ,E,CAGA"},"metadata":{},"sourceType":"module"}