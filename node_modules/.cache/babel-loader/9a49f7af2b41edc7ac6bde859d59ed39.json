{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samali tech\\\\cartApp\\\\src\\\\index.js\";\n//<------------------------------------------------- program start----------------------------------------------------------------->\n\n//<-------------------------------------------------Hookes in jsx------------------------------------------------------------------> \n// Hooks are the new feature introduced in the React 16.8 version. \n// It allows you to use state and other React features without writing a class. \n// Hooks are the functions which \"hook into\" React state and lifecycle features from function components. It does not work inside classes.\n// Note : we cant use \"HOOKS \" INSIDE classes and it should be used at the top level of the react functions \n//<--------------------- hooks type-------------------->\n// <---------Basic hooks------>\n// (1)useState:-returns a stateful value, and a function to update it.\n// (2)useEffect:-lets us perform side effects in function components\n// (3)useContext:-gives a simple function to access the data via value prop of the Context Provider in any child component\n// <----additional hooks------>\n// (4)useReducer:-state management like redux for managing state in smaller applications ratherthan having to reach for a third-party state management library\n// (5)useCallback:memoizes callback functions, so they not recreated on every re-render-returns a stateful value, and a function to update it.\n// (6)useMemo:-stores the results of expensive operations\n// (7)useRef:-lets us perform side effects in function components\n// (8)useImperativeHandle:-Used together with forwardRef which allows you to modify the ref instance thatis exposed from parent components\n// (9)useLayoutEffect:-this runs synchronously immediately after React has performed all DOM mutations\n// (10)useDebugValue:-allows you to display additional, helpful information next to your custom Hooks, with optional formatting.\n//<----------------------------------------------------- program end--------------------------------------------------------------------->\n\n//<------------------------------------------------------------program start----=-------------------------------------------->\n//<----------------------------------------------------- useState hooks in react js--------------------------------------->\n// simple Defination:-useState hooks allow as to track state in  a  functional component \n// Defination:-Hook state is the new way of declaring a state in React app. Hook uses useState() functional component for setting and retrieving state\n// import React, { useState } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n\n//<------------------------------------------------------------program start----=-------------------------------------------->\n//<----------------------------------------------------- useReducer hooks in react js(additional hooks)--------------------------------------->\n// simple Defination:-useReducer is a react hooks used for state management\n// <-----------------useState vs useReducer---------------->\n// (1)useReducer is similar to useState \n// (2)useReducer is an additional hooks\n// (3)useReducer is preferable for complex state management logic where useState is used for simpel  state management login\n// <-----------------syntex---------------->\n// syntex:- const[state,dispatch]=useReducer(reducer,initialstate);\n// here \"state\"    = current state( eg:-count:1)\n//      \"dispatch\" =it is  functioin \n//      \"reducer\"  =it is a function that accept two parameters(currentState,action)based on this two value it will return a \"newState\"\n// <-----------------inside reducer---------------->\n// useReducer work is to manage its state, this work is done by \"reducer\" function\n// \"currentState\":-  eg:-count:1\n// \"action\":- on click what should happen(increment or decrement) of currentState\n\n// import React  from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n\n//<------------------------------------------------------------program start----=-------------------------------------------->\n//<----------------------------------------------------- useEffect hooks in react js--------------------------------------->\n\n// import React, { useState } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n\n//<------------------------------------------------------------program start------------------------------------------------>\n//<----------------------------------------------------- useContext api hooks in react js--------------------------------------->\n\n// import React, { useState } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n//<------------------------------------------------------------program start------------------------------------------------>\n//<----------------------------------------------------- redux in react js--------------------------------------->\n// Defination:-when a react application grow big it become difficult to manage its state , \"redux \" solve this problem by managing application  state with single globle object called store\n// usees:-(1) make testing vary easy (2)consistany through out the application\n\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n//<------------------------------------------------------------program start------------------------------------------------>\n//<----------------------------------------------------- useCallback hooks in react js--------------------------------------->\n\n// import React, { useState } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n//<---------------------------------------------------- program end--------------------------------------------------------------->\n\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\n//<----------------------------------------------------- useRef hooks in react js--------------------------------------->\n// import React, { useState } from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n// <---------------------------------------------------- program end--------------------------------------------------------------->\n\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\n//<----------------------------------------------------- control and  uncontrol component --------------------------------------->\n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from './App';\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n// <---------------------------------------------------- program end--------------------------------------------------------------->\n\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\n//<-----------------------------------------------------List rendering in reactjs --------------------------------------->\n// \n// import React from \"react\";\n// import  ReactDOM  from \"react-dom\";\n// import App from \"./App\"\n// ReactDOM.render(\n//     <>\n//         <App/>\n//     </>,\n//     document.getElementById(\"root\")\n// );\n\n// <---------------------------------------------------- program end--------------------------------------------------------------->\n//<-----------------------------------------------------keys in reactjs --------------------------------------->\n// we need  keys  while creating list of element \n// \"keys\" are use to identify which items in list are \"change\",\"updated\"or\"deleted\";\n// in other words,we can say that keys are used to give an identity to the element  in the list;\n// and to avoide the warning(\"each child in a list should have a unique keys\") we get while reandring list\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nReactDOM.render( /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 1\n  }\n})), document.getElementById(\"root\"));\n\n// <---------------------------------------------------- program end--------------------------------------------------------------->","map":{"version":3,"names":["React","ReactDOM","App","render","document","getElementById"],"sources":["C:/Users/samali tech/cartApp/src/index.js"],"sourcesContent":["//<------------------------------------------------- program start----------------------------------------------------------------->\r\n\r\n//<-------------------------------------------------Hookes in jsx------------------------------------------------------------------> \r\n// Hooks are the new feature introduced in the React 16.8 version. \r\n// It allows you to use state and other React features without writing a class. \r\n// Hooks are the functions which \"hook into\" React state and lifecycle features from function components. It does not work inside classes.\r\n// Note : we cant use \"HOOKS \" INSIDE classes and it should be used at the top level of the react functions \r\n//<--------------------- hooks type-------------------->\r\n// <---------Basic hooks------>\r\n// (1)useState:-returns a stateful value, and a function to update it.\r\n// (2)useEffect:-lets us perform side effects in function components\r\n// (3)useContext:-gives a simple function to access the data via value prop of the Context Provider in any child component\r\n// <----additional hooks------>\r\n// (4)useReducer:-state management like redux for managing state in smaller applications ratherthan having to reach for a third-party state management library\r\n// (5)useCallback:memoizes callback functions, so they not recreated on every re-render-returns a stateful value, and a function to update it.\r\n// (6)useMemo:-stores the results of expensive operations\r\n// (7)useRef:-lets us perform side effects in function components\r\n// (8)useImperativeHandle:-Used together with forwardRef which allows you to modify the ref instance thatis exposed from parent components\r\n// (9)useLayoutEffect:-this runs synchronously immediately after React has performed all DOM mutations\r\n// (10)useDebugValue:-allows you to display additional, helpful information next to your custom Hooks, with optional formatting.\r\n//<----------------------------------------------------- program end--------------------------------------------------------------------->\r\n\r\n\r\n//<------------------------------------------------------------program start----=-------------------------------------------->\r\n//<----------------------------------------------------- useState hooks in react js--------------------------------------->\r\n// simple Defination:-useState hooks allow as to track state in  a  functional component \r\n// Defination:-Hook state is the new way of declaring a state in React app. Hook uses useState() functional component for setting and retrieving state\r\n// import React, { useState } from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n//<------------------------------------------------------------program start----=-------------------------------------------->\r\n//<----------------------------------------------------- useReducer hooks in react js(additional hooks)--------------------------------------->\r\n// simple Defination:-useReducer is a react hooks used for state management\r\n// <-----------------useState vs useReducer---------------->\r\n// (1)useReducer is similar to useState \r\n// (2)useReducer is an additional hooks\r\n// (3)useReducer is preferable for complex state management logic where useState is used for simpel  state management login\r\n// <-----------------syntex---------------->\r\n// syntex:- const[state,dispatch]=useReducer(reducer,initialstate);\r\n// here \"state\"    = current state( eg:-count:1)\r\n//      \"dispatch\" =it is  functioin \r\n//      \"reducer\"  =it is a function that accept two parameters(currentState,action)based on this two value it will return a \"newState\"\r\n// <-----------------inside reducer---------------->\r\n// useReducer work is to manage its state, this work is done by \"reducer\" function\r\n// \"currentState\":-  eg:-count:1\r\n// \"action\":- on click what should happen(increment or decrement) of currentState\r\n\r\n// import React  from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n//<------------------------------------------------------------program start----=-------------------------------------------->\r\n//<----------------------------------------------------- useEffect hooks in react js--------------------------------------->\r\n\r\n// import React, { useState } from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n\r\n//<------------------------------------------------------------program start------------------------------------------------>\r\n//<----------------------------------------------------- useContext api hooks in react js--------------------------------------->\r\n\r\n// import React, { useState } from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n//<------------------------------------------------------------program start------------------------------------------------>\r\n//<----------------------------------------------------- redux in react js--------------------------------------->\r\n// Defination:-when a react application grow big it become difficult to manage its state , \"redux \" solve this problem by managing application  state with single globle object called store\r\n// usees:-(1) make testing vary easy (2)consistany through out the application\r\n\r\n// import React from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n//<------------------------------------------------------------program start------------------------------------------------>\r\n//<----------------------------------------------------- useCallback hooks in react js--------------------------------------->\r\n\r\n// import React, { useState } from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n\r\n\r\n\r\n//<---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\r\n//<----------------------------------------------------- useRef hooks in react js--------------------------------------->\r\n// import React, { useState } from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// <---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n\r\n\r\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\r\n//<----------------------------------------------------- control and  uncontrol component --------------------------------------->\r\n// import React from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from './App';\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// <---------------------------------------------------- program end--------------------------------------------------------------->\r\n\r\n\r\n// <---------------------------------------------------- PROGRAM START--------------------------------------------------->\r\n//<-----------------------------------------------------List rendering in reactjs --------------------------------------->\r\n// \r\n// import React from \"react\";\r\n// import  ReactDOM  from \"react-dom\";\r\n// import App from \"./App\"\r\n// ReactDOM.render(\r\n//     <>\r\n//         <App/>\r\n//     </>,\r\n//     document.getElementById(\"root\")\r\n// );\r\n\r\n// <---------------------------------------------------- program end--------------------------------------------------------------->\r\n//<-----------------------------------------------------keys in reactjs --------------------------------------->\r\n// we need  keys  while creating list of element \r\n// \"keys\" are use to identify which items in list are \"change\",\"updated\"or\"deleted\";\r\n// in other words,we can say that keys are used to give an identity to the element  in the list;\r\n// and to avoide the warning(\"each child in a list should have a unique keys\") we get while reandring list\r\nimport React from \"react\";\r\nimport  ReactDOM  from \"react-dom\";\r\nimport App from \"./App.js\";\r\nReactDOM.render(\r\n   <>\r\n<App/>\r\n   </>,\r\n\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// <---------------------------------------------------- program end--------------------------------------------------------------->\r\n"],"mappings":";AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAQC,QAAQ,MAAO,WAAW;AAClC,OAAOC,GAAG,MAAM,UAAU;AAC1BD,QAAQ,CAACE,MAAM,eACZ,uDACH,oBAAC,GAAG;EAAA;EAAA;IAAA;IAAA;IAAA;EAAA;AAAA,EAAE,CACA,EAEFC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAClC;;AAED"},"metadata":{},"sourceType":"module"}